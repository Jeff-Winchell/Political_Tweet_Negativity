DescTools::Gini(x=data[data$Kingdom==26&data$Size>=40,3])
DescTools::Gini(x=data[data$Kingdom==26,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==29,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==29,3])
DescTools::Gini(x=data[data$Kingdom==29&data$Size>=40,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==14&data$Size>=40,3])
DescTools::Gini(x=data[data$Kingdom==14,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==2,3])
DescTools::Gini(x=data[data$Kingdom==2&data$Size>=40,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==1&data$Size>=40,3])
DescTools::Gini(x=data[data$Kingdom==1,3])
DescTools::Gini(x=data[data$Kingdom==11,3])
DescTools::Gini(x=data[data$Kingdom==11&data$Size>=40,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==15&data$Size>=40,3])
DescTools::Gini(x=data[data$Kingdom==16,3])
DescTools::Gini(x=data[data$Kingdom==15,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==12,3])
DescTools::Gini(x=data[data$Kingdom==12&data$Size>=40,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==7&data$Size>=40,3])
DescTools::Gini(x=data[data$Kingdom==7,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==58,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==3,3])
DescTools::Gini(x=data[data$Kingdom==3&data$Size>=40,3])
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=sum)
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=sum)
DescTools::Gini(x=data[data$Kingdom==33&data$Size>=40,3])
DescTools::Gini(x=data[data$Kingdom==33,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==39,3])
DescTools::Gini(x=data[data$Kingdom==39&data$Size>=40,3])
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=sum)
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=sum)
DescTools::Gini(x=data[data$Kingdom==10&data$Size>=40,3])
DescTools::Gini(x=data[data$Kingdom==10,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=sum)
DescTools::Gini(x=data[data$Kingdom==19,3])
DescTools::Gini(x=data[data$Kingdom==19&data$Size>=40,3])
T4data=read.csv('c:\\fun\\got\\T4_list.csv')
View(T4data)
aggregate(T4data$Size, by=list(Category=data$Kingdom), FUN=sum)
sum(T4data$Size)
sum(T4data$Kingdom)
len(T4data$Kingdom)
length(T4data$Kingdom)
length(T4data$Size)
aggregate(T4data$Size, by=list(Category=data$Kingdom), FUN=sum)
aggregate(Size, by=list(Category=Kingdom), FUN=sum, data=T4data)
aggregate(.~Kingdom, sum, data=T4data)
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==4&data$Size>=40,3])
DescTools::Gini(x=data[data$Kingdom==4,3])
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=sum)
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=sum)
DescTools::Gini(x=data[data$Kingdom==18,3])
DescTools::Gini(x=data[data$Kingdom==18&data$Size>=40,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==13&data$Size>=40,3])
DescTools::Gini(x=data[data$Kingdom==13,3])
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=sum)
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=sum)
DescTools::Gini(x=data[data$Kingdom==17,3])
DescTools::Gini(x=data[data$Kingdom==17&data$Size>=40,3])
data=read.csv('c:\\fun\\got\\gini_kingdom.csv')
DescTools::Gini(x=data[data$Kingdom==6,3])
DescTools::Gini(x=data[data$Kingdom==8,3])
DescTools::Gini(x=data[data$Kingdom==6&data$Size>=40,3])
DescTools::Gini(x=data[data$Kingdom==8&data$Size>=40,3])
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=sum)
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=count)
aggregate(data$Size, by=list(Category=data$Kingdom), FUN=length)
aggregate(data.frame(count = data$Kingdom), list(value = data$Kingdom), length)
foo=data$Kingdom
aggregate(count=foo),list(value=foo), length)
aggregate(data.frame(count=foo),list(value=foo), length)
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
sample(1:11)
sample(1:11,1)
sample(1:11,1)
sample(1:11,1)
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
foo=40
as.character(foo)
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
Chests=40
Title=paste('Number of Badges in ',as.character(Chests),' Chests')
Title
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
warnings()
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
source('C:/Fun/GOT/badge_simulation.R')
library(httr)
source(paste(getSrcDirectory(function(dummy) {dummy}), "/Twitter_Account_List.r", sep=""))  #Change codes in this file to map to your own Twitter application keys. The crazy stuff at the beginning of this line is a hack to get the current directory of the currently executing script.
options(useFancyQuotes=FALSE)
Twitter_Token <- httr::oauth1.0_token(endpoint=httr::oauth_endpoints("twitter"),app=httr::oauth_app("twitter",
key="pHDF233DrfTtmd6yfZYGz3mY1",secret="RY6Ca9qsCNgZ1Ny9mKq4WEvVVRBdsY1Eu5G6DgJ2pICh4oFIjf"),cache=TRUE)
Twitter_Token <- httr::oauth1.0_token(endpoint=httr::oauth_endpoints("twitter"),app=httr::oauth_app("GetMediaFriends",
key="pHDF233DrfTtmd6yfZYGz3mY1",secret="RY6Ca9qsCNgZ1Ny9mKq4WEvVVRBdsY1Eu5G6DgJ2pICh4oFIjf"),cache=TRUE)
oauth_endpoints("twitter")
myapp <- oauth_app("twitter", key = "pHDF233DrfTtmd6yfZYGz3mY1", secret = "RY6Ca9qsCNgZ1Ny9mKq4WEvVVRBdsY1Eu5G6DgJ2pICh4oFIjf")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app("twitter", key = "pHDF233DrfTtmd6yfZYGz3mY1", secret = "RY6Ca9qsCNgZ1Ny9mKq4WEvVVRBdsY1Eu5G6DgJ2pICh4oFIjf",access_token="708746907581976576-HCdqwWWy6OmtnEdP9WzgsIKWxKKjIEh",access_secret="cWzIUG4e8kjG1HbZ0RmiD0pHka9qNH6vxOYgE8q6m1kIi")
myapp <- oauth_app("twitter", key = "pHDF233DrfTtmd6yfZYGz3mY1", secret = "RY6Ca9qsCNgZ1Ny9mKq4WEvVVRBdsY1Eu5G6DgJ2pICh4oFIjf")
oauth_endpoints("twitter")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app("GetMediaFriends", key = "pHDF233DrfTtmd6yfZYGz3mY1", secret = "RY6Ca9qsCNgZ1Ny9mKq4WEvVVRBdsY1Eu5G6DgJ2pICh4oFIjf")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app(app="GetMediaFriends", key = "pHDF233DrfTtmd6yfZYGz3mY1", secret = "RY6Ca9qsCNgZ1Ny9mKq4WEvVVRBdsY1Eu5G6DgJ2pICh4oFIjf")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app(appname="GetMediaFriends", key = "pHDF233DrfTtmd6yfZYGz3mY1", secret = "RY6Ca9qsCNgZ1Ny9mKq4WEvVVRBdsY1Eu5G6DgJ2pICh4oFIjf")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app(appname="GetMediaFriends", key = "mKKeyLB6vy7UOUDXJNTONJ7ae", secret = "EKm2Cdszo8MJDGYCdH8MvsDWXE0BWgciYNF0iDg4Kj7F9pCYAW")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app(appname="twitter", key = "mKKeyLB6vy7UOUDXJNTONJ7ae", secret = "EKm2Cdszo8MJDGYCdH8MvsDWXE0BWgciYNF0iDg4Kj7F9pCYAW")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app(appname="twitter", key = "qo8JuusiqhVFTKsaBdy5EM3QB", secret = "clP0mUbhuzlyDYQcNd61z6T9V7Be5CTPkRxMcXI4m4cekHbfDP")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app(appname="twitter", key = "qo8JuusiqhVFTKsaBdy5EM3QB", secret = "clP0mUbhuzlyDYQcNd61z6T9V7Be5CTPkRxMcXI4m4cekHbfDP",redirect_uri = "http://127.0.0.1:1410")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app(appname="GetMediaFriends", key = "qo8JuusiqhVFTKsaBdy5EM3QB", secret = "clP0mUbhuzlyDYQcNd61z6T9V7Be5CTPkRxMcXI4m4cekHbfDP",redirect_uri = "http://127.0.0.1:1410")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app(key = "qo8JuusiqhVFTKsaBdy5EM3QB", secret = "clP0mUbhuzlyDYQcNd61z6T9V7Be5CTPkRxMcXI4m4cekHbfDP",redirect_uri = "http://127.0.0.1:1410")
twitter_token <- oauth1.0_token(oauth_endpoint("twitter"), myapp)
myapp <- oauth_app(appname="GetMediaFriends", key = "qo8JuusiqhVFTKsaBdy5EM3QB", secret = "clP0mUbhuzlyDYQcNd61z6T9V7Be5CTPkRxMcXI4m4cekHbfDP",redirect_uri = "http://127.0.0.1:1410")
twitter_token <- oauth1.0_token(oauth_endpoint("twitter"), myapp)
myapp <- oauth_app(appname="twitter", key = "qo8JuusiqhVFTKsaBdy5EM3QB", secret = "clP0mUbhuzlyDYQcNd61z6T9V7Be5CTPkRxMcXI4m4cekHbfDP",redirect_uri = "http://127.0.0.1:1410")
twitter_token <- oauth1.0_token(oauth_endpoint("twitter"), myapp)
oath_callback()
oauth_callback()
myapp <- oauth_app(appname="twitter", key = "qo8JuusiqhVFTKsaBdy5EM3QB", secret = "clP0mUbhuzlyDYQcNd61z6T9V7Be5CTPkRxMcXI4m4cekHbfDP",redirect_uri = "http://127.0.0.1:1410")
twitter_token <- oauth1.0_token(oauth_endpoint("twitter"), myapp)
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app(appname="twitter", key = "qo8JuusiqhVFTKsaBdy5EM3QB", secret = "clP0mUbhuzlyDYQcNd61z6T9V7Be5CTPkRxMcXI4m4cekHbfDP")
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
myapp <- oauth_app(appname="twitter", key = "qo8JuusiqhVFTKsaBdy5EM3QB", secret = "clP0mUbhuzlyDYQcNd61z6T9V7Be5CTPkRxMcXI4m4cekHbfDP")
myapp <- httr::oauth_app(appname="twitter", key = "qo8JuusiqhVFTKsaBdy5EM3QB", secret = "clP0mUbhuzlyDYQcNd61z6T9V7Be5CTPkRxMcXI4m4cekHbfDP")
twitter_token <- httr::oauth1.0_token(oauth_endpoints("twitter"), myapp)
twitter_token <- httr::oauth1.0_token(httr::oauth_endpoints("twitter"), myapp)
twitter_token <- httr::Token1.0$new(endpoint=NULL,params=list(as_header=TRUE),myapp,credentials=list(oauth_token="708746907581976576-HCdqwWWy6OmtnEdP9WzgsIKWxKKjIEh",oauth_token_secret="cWzIUG4e8kjG1HbZ0RmiD0pHka9qNH6vxOYgE8q6m1kIi"))
data=httr::content(httr::GET("https://api.twitter.com/1.1/users/lookup.json",query=list(screen_name="SenSanders,BernieSanders,MikeBloomberg,SenWarren,EWarren,PeteButtigieg,SenAmyKlobuchar,AmyKlobuchar,JoeBiden,TulsiGabbard,TulsiPress,TomSteyer,POTUS,realDonaldTrump"),httr::config(token=twitter_token)))
data
length(data)
data$description[1]
data$id[1]
data
data[[1]]
data[1]
data[1]$id
data[[1]]$id
data[[1]]$description
data[[2]]$description
data[[3]]$description
data[[3]]$created_at
data[[3]]$verified
library(RevoScaleR)
install.packages("RevoScaleR")
install.packages("RevoScaleR")
install.packages("RevoScaleR")
install.packages("RevoScaleR")
library(RevoScaleR)
options(useFancyQuotes=FALSE)
source('C:/Politics/Twitter_Politican_Supporters/Get_Politicians.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Politicians.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Politicians.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Politicians.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Politicians.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Politicians.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Politicians.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Politicians.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Politicians.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Follower_Profile.R')
SQL_Server_Connection_String="Driver=SQL Server;Server=(local);Database=Politicians_Twitter_Followers;Trusted_Connection=true"
RevoScaleR::rxSetComputeContext(RevoScaleR::RxInSqlServer(connectionString=SQL_Server_Connection_String,shareDir=paste("C:\\AllShare\\",Sys.getenv("USERNAME"),sep=""),wait=TRUE,consoleOutput=FALSE))
DataConnection<-RevoScaleR::RxSqlServerData(connectionString=SQL_Server_Connection_String,table='[Following]')
RevoScaleR::rxOpen(DataConnection,mode="w")
Users=RevoScaleR::rxImport(RevoScaleR::RxSqlServerData(connectionString=SQL_Server_Connection_String,
sqlQuery="Select String_Agg(Follower,',') As Follower_Ids From (Select Top 100 * From (Select Distinct Follower From [Following] Where Exists(Select * From [User] Where [User].Id=[Following].Follower And Screen_Name Is Null)) Foo Order By NewId()) Bar",
rowsPerRead=500))
Users
users[[1]]
Users[[1]]
Users$Follower_Ids
Users$Follower_Ids[1]
Users$Follower_Ids[[1]]
Users$Follower_Ids
Users
Rate_Requests_Available=0
Followers_Requests_Available=0
Twitter_Account=0
Twitter_Account_Usage_Info=Find_or_Wait_For_Available_Twitter_Account(Twitter_Account,Rate_Requests_Available,Followers_Requests_Available,"users")
source('C:/Politics/Twitter_Politican_Supporters/Find_Or_Wait_For_Available_Twitter_Account.r')
Users$Follower_Ids
Twitter_Account_Usage_Info=Find_or_Wait_For_Available_Twitter_Account(Twitter_Account,Rate_Requests_Available,Followers_Requests_Available,"users")
Twitter_Token=Twitter_Account_Usage_Info[[4]]
data=httr::content(httr::GET("https://api.twitter.com/1.1/users/lookup.json",
query=list(user_id = Users$Follower_Ids, cursor = Starting_Follower_Id_Of_Next_Page, stringify_ids=TRUE,count=5000),httr::config(token=Twitter_Token)))
source('C:/Politics/Twitter_Politican_Supporters/Get_Follower_Profile.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Follower_Profile.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Follower_Profile.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Politicians.R')
source('C:/Politics/Twitter_Politican_Supporters/SecondInstance/Get_Followers.R')
source('C:/Politics/Twitter_Politican_Supporters/SecondInstance/Get_Followers.R')
source('C:/Politics/Twitter_Politican_Supporters/SecondInstance/Get_Followers.R')
sample.int(31,size=1)
sample.int(31,size=1)
sample.int(31,size=1)
sample.int(31,size=1)
source('C:/Politics/Twitter_Politican_Supporters/SecondInstance/Get_Followers.R')
Get_Followers('SenWarren')
source('C:/Politics/Twitter_Politican_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politican_Supporters/Find_Or_Wait_For_Available_Twitter_Account.r')
source('C:/Politics/Twitter_Politican_Supporters/Get_Followers.R')
Get_Followers('JoeBiden')
source(paste(getSrcDirectory(function(dummy) {dummy}), "./Twitter_Account_List.r", sep=""))
sample.int(31,size=1)
sample.int(31,size=1)
sample.int(31,size=1)
sample.int(31,size=1)
sample.int(31,size=1)
sample.int(31,size=1)
source('C:/Politics/Twitter_Politican_Supporters/foo.r')
source('C:/Politics/Twitter_Politican_Supporters/foo.r')
source('C:/Politics/Twitter_Politican_Supporters/foo.r')
source('C:/Politics/Twitter_Politican_Supporters/foo.r')
source('C:/Politics/Twitter_Politican_Supporters/Find_Or_Wait_For_Available_Twitter_Account.r')
source('C:/Politics/Twitter_Politican_Supporters/Get_Followers.R')
Get_Followers('JoeBiden')
source('C:/Politics/Twitter_Politican_Supporters/Get_Followers.R')
Get_Followers('POTUS')
source('C:/Politics/Twitter_Politican_Supporters/Get_Followers.R')
Get_Followers('SenWarren')
Get_Followers('SenWarren')
Get_Followers('SenWarren')
]
Get_Followers('JoeBiden')
options(useFancyQuotes=FALSE)
source(paste(getSrcDirectory(function(dummy) {dummy}), "./Twitter_Account_List.r", sep=""))  #Change codes in this file to map to your own Twitter application keys. The crazy stuff at the beginning of this line is a hack to get the current directory of the currently executing script.
source(paste(getSrcDirectory(function(dummy) {dummy}), "./Find_or_Wait_For_Available_Twitter_Account.r", sep=""))  #Source code to shared function that does what it's name implies
#Setup R's connection to SQL Server 2019
# For sql server authentication use the format of the next line for a connection string. For windows authentication the line below that is the proper format.
#SQL_Server_Connection_String="Driver=SQL Server;Server=(local);Database=Retweet;Uid=CSCIE63;Pwd=BigDataAnalytics"
SQL_Server_Connection_String="Driver=SQL Server;Server=(local);Database=Politicians_Twitter_Followers;Trusted_Connection=true"
RevoScaleR::rxSetComputeContext(RevoScaleR::RxInSqlServer(connectionString=SQL_Server_Connection_String,shareDir=paste("C:\\AllShare\\",Sys.getenv("USERNAME"),sep=""),wait=TRUE,consoleOutput=FALSE))
DataConnection<-RevoScaleR::RxSqlServerData(connectionString=SQL_Server_Connection_String,table='[Following]')
RevoScaleR::rxOpen(DataConnection,mode="w")
Users=RevoScaleR::rxImport(RevoScaleR::RxSqlServerData(connectionString=SQL_Server_Connection_String,
sqlQuery="Select String_Agg(Id,',') As Follower_Ids From (Select Top 100 Id From [User] TableSample (4000 rows) Where Screen_Name Is Null Order By NewId()) Temp",
rowsPerRead=500))
#Initialize Data
Rate_Requests_Available=0
User_Requests_Available=0
Twitter_Account=0
Twitter_Token=Null
Twitter_Token=NULL
Twitter_Account_Usage_Info=Find_or_Wait_For_Available_Twitter_Account(Twitter_Account,Twitter_Token,Rate_Requests_Available,User_Requests_Available,"users")
Twitter_Account=Twitter_Account_Usage_Info[[1]]
Rate_Requests_Available=Twitter_Account_Usage_Info[[2]]
User_Requests_Available=Twitter_Account_Usage_Info[[3]]
Twitter_Token=Twitter_Account_Usage_Info[[4]]
data=httr::content(httr::GET("https://api.twitter.com/1.1/users/lookup.json",
query=list(user_id = Users$Follower_Ids, stringify_ids=TRUE,count=100),
httr::config(token=Twitter_Token)))
User_Requests_Available=User_Requests_Available-1
for (i in 1:length(data)) {
RevoScaleR::rxExecuteSQLDDL(DataConnection,sSQLString=paste("Exec Update_User ",paste(sQuote(data[[i]]$id_str),sQuote(data[[i]]$screen_name),sQuote(gsub("'","''",data[[i]]$name)),sQuote(gsub("'","''",data[[i]]$description)),as.character(data[[i]]$followers_count),as.character(data[[i]]$friends_count),data[[i]]$lang,as.character(data[[i]]$statuses_count),sQuote(data[[i]]$created_at),ifelse(data[[i]]$verified,1,0),sep=","),sep=""))
}
for (i in 1:length(data)) {
RevoScaleR::rxExecuteSQLDDL(DataConnection,sSQLString=paste("Exec Update_User ",paste(sQuote(data[[i]]$id_str),sQuote(data[[i]]$screen_name),sQuote(gsub("'","''",data[[i]]$name)),sQuote(gsub("'","''",data[[i]]$description)),as.character(data[[i]]$followers_count),as.character(data[[i]]$friends_count),Ifelse(data[[i]]$lang='','NULL',data[[i]]$lang,as.character(data[[i]]$statuses_count),sQuote(data[[i]]$created_at),ifelse(data[[i]]$verified,1,0),sep=","),sep=""))
}
data[[1]]$lang
is.null(data[[1]]$lang)
for (i in 1:length(data)) {
RevoScaleR::rxExecuteSQLDDL(DataConnection,sSQLString=paste("Exec Update_User ",paste(sQuote(data[[i]]$id_str),sQuote(data[[i]]$screen_name),sQuote(gsub("'","''",data[[i]]$name)),sQuote(gsub("'","''",data[[i]]$description)),as.character(data[[i]]$followers_count),as.character(data[[i]]$friends_count),Ifelse(is.null(data[[i]]$lang),'NULL',data[[i]]$lang,as.character(data[[i]]$statuses_count),sQuote(data[[i]]$created_at),ifelse(data[[i]]$verified,1,0),sep=","),sep=""))
}
for (i in 1:length(data)) {
RevoScaleR::rxExecuteSQLDDL(DataConnection,sSQLString=paste("Exec Update_User ",paste(sQuote(data[[i]]$id_str),sQuote(data[[i]]$screen_name),sQuote(gsub("'","''",data[[i]]$name)),sQuote(gsub("'","''",data[[i]]$description)),as.character(data[[i]]$followers_count),as.character(data[[i]]$friends_count),ifelse(is.null(data[[i]]$lang),'NULL',data[[i]]$lang,as.character(data[[i]]$statuses_count),sQuote(data[[i]]$created_at),ifelse(data[[i]]$verified,1,0),sep=","),sep=""))
}
sSQLString=paste("Exec Update_User ",paste(sQuote(data[[i]]$id_str),sQuote(data[[i]]$screen_name),sQuote(gsub("'","''",data[[i]]$name)),sQuote(gsub("'","''",data[[i]]$description)),as.character(data[[i]]$followers_count),as.character(data[[i]]$friends_count),ifelse(is.null(data[[i]]$lang),'NULL',data[[i]]$lang,as.character(data[[i]]$statuses_count),sQuote(data[[i]]$created_at),ifelse(data[[i]]$verified,1,0),sep=","),sep="")
)
for (i in 1:length(data)) {
RevoScaleR::rxExecuteSQLDDL(DataConnection,
sSQLString=paste("Exec Update_User ",paste(sQuote(data[[i]]$id_str),sQuote(data[[i]]$screen_name),sQuote(gsub("'","''",data[[i]]$name)),sQuote(gsub("'","''",data[[i]]$description)),as.character(data[[i]]$followers_count),as.character(data[[i]]$friends_count),ifelse(is.null(data[[i]]$lang),'NULL',data[[i]]$lang),as.character(data[[i]]$statuses_count),sQuote(data[[i]]$created_at),ifelse(data[[i]]$verified,1,0),sep=","),sep="")
)
}
Users=RevoScaleR::rxImport(RevoScaleR::RxSqlServerData(connectionString=SQL_Server_Connection_String,
sqlQuery="Select String_Agg(Id,',') As Follower_Ids From (Select Top 100 Id From [User] TableSample (4000 rows) Where Screen_Name Is Null Order By NewId()) Temp",
rowsPerRead=500))
Twitter_Account_Usage_Info=Find_or_Wait_For_Available_Twitter_Account(Twitter_Account,Twitter_Token,Rate_Requests_Available,User_Requests_Available,"users")
Twitter_Account=Twitter_Account_Usage_Info[[1]]
Rate_Requests_Available=Twitter_Account_Usage_Info[[2]]
User_Requests_Available=Twitter_Account_Usage_Info[[3]]
Twitter_Token=Twitter_Account_Usage_Info[[4]]
data=httr::content(httr::GET("https://api.twitter.com/1.1/users/lookup.json",
query=list(user_id = Users$Follower_Ids, stringify_ids=TRUE,count=100),
httr::config(token=Twitter_Token)))
length(data)
nrow(data)
source('C:/Politics/Twitter_Politican_Supporters/Get_Follower_Profile2.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Follower_Profile2.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Follower_Profile2.R')
source('C:/Politics/Twitter_Politican_Supporters/Get_Follower_Profile2.R')
Start_Time=Sys.time()
difftime(Start_Time,Sys.time(),units="hours")
difftime(Sys.time(),Start_Time,units="hours")
difftime(Sys.time(),Start_Time,units="mins")
source('C:/Politics/Twitter_Politician_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politician_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politician_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politician_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politician_Supporters/Get_Followers.R')
source('C:/Politics/Twitter_Politician_Supporters/Get_Followers.R')
options(useFancyQuotes=FALSE)
source(paste(getSrcDirectory(function(dummy) {dummy}), "./Twitter_Account_List.r", sep=""))
options(warn=0)
options(useFancyQuotes=FALSE)
source(paste(getSrcDirectory(function(dummy) {dummy}), "./Twitter_Account_List.r", sep=""))
source(paste(getSrcDirectory(function(dummy) {dummy}), "./Twitter_Account_List.r", sep=""))
source('C:/Politics/Twitter_Politician_Supporters/Get_Tweets.R')
source('C:/Politics/Twitter_Politician_Supporters/Get_Tweets.R')
source('C:/Politics/Twitter_Politician_Supporters/Get_SearchedTweetCount.R')
source('C:/Politics/Twitter_Politician_Supporters/Get_Follower_Profile.R')
options(warn=2,error=recover)
options(useFancyQuotes=FALSE)
source(paste(getSrcDirectory(function(dummy) {dummy}), "./Twitter_Account_List.r", sep=""))
options(warn=2,error=recover)
options(useFancyQuotes=FALSE)
source(paste(getSrcDirectory(function(dummy) {dummy}), "./Twitter_Account_List.r", sep=""))
options(warn=2,error=recover)
options(useFancyQuotes=FALSE)
source(paste(getSrcDirectory(function(dummy) {dummy}), "./Twitter_Account_List.r", sep=""))
source('C:/Politics/Twitter_Politician_Supporters/Get_Follower_Profile.R')
source('C:/Politics/Twitter_Politician_Supporters/Get_Follower_Profile_Jeff.R')
source('C:/Politics/Twitter_Politician_Supporters/Get_Followers_Jeff.R')
options(useFancyQuotes=FALSE)
#For Windows authentication to SQL Server use the line below, for SQL Server authentication use SQL_Server_Connection_String="Driver=SQL Server;Server=(local);Database=Retweet;Uid=YourUserName;Pwd=YourPassword"
SQL_Server_Connection_String="Driver=SQL Server;Server=(local);Database=Politicians_Twitter_Followers;Trusted_Connection=true"
DataConnection<-RevoScaleR::RxSqlServerData(connectionString=SQL_Server_Connection_String,table='[Following]')
RevoScaleR::rxOpen(DataConnection,mode="w")
source(paste(getSrcDirectory(function(dummy) {dummy}), "../Twitter_Account_List.r", sep=""))  #Change codes in this file to map to your own Twitter application keys. The crazy stuff at the beginning of this line is a hack to get the current directory of the currently executing script.
setwd("C:/Politics/Twitter_Politician_Supporters/Political_Tweet_Negativity")
source(paste(getSrcDirectory(function(dummy) {dummy}), "../Twitter_Account_List.r", sep=""))  #Change codes in this file to map to your own Twitter application keys. The crazy stuff at the beginning of this line is a hack to get the current directory of the currently executing script.
Twitter_Token <- httr::Token1.0$new(endpoint=NULL,
params=list(as_header=TRUE),
app=httr::oauth_app(appname="twitter", key=Twitter_Account_List$ConsumerKey[1], secret=Twitter_Account_List$ConsumerSecret[1]),
credentials=list(oauth_token=Twitter_Account_List$AccessToken[1],oauth_token_secret=Twitter_Account_List$AccessTokenSecret[1])
)
Twitter_Token <- httr::Token1.0$new(endpoint=NULL,
params=list(as_header=TRUE),
app=httr::oauth_app(appname="twitter", key=Twitter_Account_List$ConsumerKey[1], secret=Twitter_Account_List$ConsumerSecret[1]),
credentials=list(oauth_token=Twitter_Account_List$AccessToken[1],oauth_token_secret=Twitter_Account_List$AccessTokenSecret[1])
)
data=httr::content(httr::GET("https://api.twitter.com/1.1/users/lookup.json",
query=list(screen_name="SenSanders,BernieSanders,MikeBloomberg,SenWarren,EWarren,PeteButtigieg,SenAmyKlobuchar,AmyKlobuchar,JoeBiden,TulsiGabbard,TulsiPress,TomSteyer,POTUS,realDonaldTrump"),
httr::config(token=Twitter_Token)
))
for (i in 1:length(data)) {
RevoScaleR::rxExecuteSQLDDL(DataConnection,sSQLString=paste("Exec Insert_Politician ",paste(sQuote(data[[i]]$id_str),sQuote(data[[i]]$screen_name),sQuote(data[[i]]$name),sQuote(gsub("'","''",data[[i]]$description)),as.character(data[[i]]$followers_count),as.character(data[[i]]$statuses_count),sQuote(data[[i]]$created_at),ifelse(data[[i]]$verified,1,0),sep=","),sep=""))
}
RevoScaleR::rxClose(DataConnection)
SQL_Server_Connection_String="Driver=SQL Server;Server=(local);Database=Test;Trusted_Connection=true"
DataConnection<-RevoScaleR::RxSqlServerData(connectionString=SQL_Server_Connection_String,table='[Following]')
RevoScaleR::rxOpen(DataConnection,mode="w")
for (i in 1:length(data)) {
RevoScaleR::rxExecuteSQLDDL(DataConnection,sSQLString=paste("Exec Insert_Politician ",paste(sQuote(data[[i]]$id_str),sQuote(data[[i]]$screen_name),sQuote(data[[i]]$name),sQuote(gsub("'","''",data[[i]]$description)),as.character(data[[i]]$followers_count),as.character(data[[i]]$statuses_count),sQuote(data[[i]]$created_at),ifelse(data[[i]]$verified,1,0),sep=","),sep=""))
}
data=httr::content(httr::GET("https://api.twitter.com/1.1/users/lookup.json",
query=list(screen_name="SenSanders,AndrewYang,BernieSanders,MikeBloomberg,SenWarren,EWarren,PeteButtigieg,SenAmyKlobuchar,AmyKlobuchar,JoeBiden,TulsiGabbard,TulsiPress,TomSteyer,POTUS,realDonaldTrump"),
httr::config(token=Twitter_Token)
))
for (i in 1:length(data)) {
RevoScaleR::rxExecuteSQLDDL(DataConnection,sSQLString=paste("Exec Insert_Politician ",paste(sQuote(data[[i]]$id_str),sQuote(data[[i]]$screen_name),sQuote(data[[i]]$name),sQuote(gsub("'","''",data[[i]]$description)),as.character(data[[i]]$followers_count),as.character(data[[i]]$statuses_count),sQuote(data[[i]]$created_at),ifelse(data[[i]]$verified,1,0),sep=","),sep=""))
}
